#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
"""

import subprocess
import sys
import argparse

def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - –≥–æ—Ç–æ–≤–æ!")
        if result.stdout:
            print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if e.stderr:
            print(e.stderr)
        return False
    return True

def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
    run_command("docker-compose ps", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    
    print("\nüìà –û—á–µ—Ä–µ–¥–∏:")
    run_command("docker-compose exec redis redis-cli llen raw_content_queue", "–í—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    run_command("docker-compose exec redis redis-cli llen processing_queue", "–û–±—Ä–∞–±–æ—Ç–∫–∞")
    run_command("docker-compose exec redis redis-cli llen publishing_queue", "–ü—É–±–ª–∏–∫–∞—Ü–∏—è")

def start():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"""
    run_command("mkdir -p data/postgres data/redis data/minio logs", "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
    run_command("docker-compose up -d postgres redis", "–ó–∞–ø—É—Å–∫ –ë–î")
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î...")
    run_command("sleep 15", "–û–∂–∏–¥–∞–Ω–∏–µ")
    run_command("docker-compose exec -T postgres psql -U cryptouser -d cryptodb -f /docker-entrypoint-initdb.d/init-db.sql", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î")
    run_command("docker-compose up -d", "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    print("üìä –ü–∞–Ω–µ–ª—å: http://localhost:3000")
    print("üîß API: http://localhost:8000")
    print("üìù –ú–æ–¥–µ—Ä–∞—Ü–∏—è: http://localhost:8000/hitl")

def stop():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"""
    run_command("docker-compose down", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")

def restart():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"""
    stop()
    start()

def logs():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
    print("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    subprocess.run("docker-compose logs -f worker api", shell=True)

def backup():
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø"""
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    run_command("mkdir -p backups", "–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –±—ç–∫–∞–ø–æ–≤")
    run_command(f"docker-compose exec postgres pg_dump -U cryptouser cryptodb > backups/db_backup_{timestamp}.sql", "–ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print(f"üíæ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: backups/db_backup_{timestamp}.sql")

def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:")
    
    checks = [
        ("curl -s http://localhost:8000/health", "API –¥–æ—Å—Ç—É–ø–µ–Ω"),
        ("docker-compose exec postgres pg_isready", "PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç"),
        ("docker-compose exec redis redis-cli ping", "Redis —Ä–∞–±–æ—Ç–∞–µ—Ç"),
        ("curl -s http://localhost:9000/minio/health/live", "MinIO –¥–æ—Å—Ç—É–ø–µ–Ω"),
    ]
    
    for cmd, desc in checks:
        if run_command(cmd, desc):
            print(f"‚úÖ {desc}")
        else:
            print(f"‚ùå {desc}")

def main():
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Crypto Autoposting System')
    parser.add_argument('command', choices=['start', 'stop', 'restart', 'status', 'logs', 'backup', 'health'], 
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    if len(sys.argv) == 1:
        print("""
üöÄ Crypto Autoposting System - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
  stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É  
  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
  status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
  backup   - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  health   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã

–ü—Ä–∏–º–µ—Ä—ã:
  python manage.py start
  python manage.py status
  python manage.py logs
        """)
        return
    
    args = parser.parse_args()
    
    commands = {
        'start': start,
        'stop': stop,
        'restart': restart,
        'status': status,
        'logs': logs,
        'backup': backup,
        'health': health
    }
    
    commands[args.command]()

if __name__ == "__main__":
    main()
