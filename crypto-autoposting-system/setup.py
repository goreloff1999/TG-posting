#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
–í—Å–µ–≥–æ 4 —à–∞–≥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞!
"""

import os
import json
import yaml
import secrets
import subprocess
import sys
from pathlib import Path

def print_header():
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë           üöÄ CRYPTO AUTOPOSTING SYSTEM SETUP üöÄ              ‚ïë
‚ïë                                                              ‚ïë
‚ïë              –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞ 4 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞!                   ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

def step_1_api_keys():
    print("\nüìù –®–ê–ì 1: API –ö–õ–Æ–ß–ò")
    print("=" * 50)
    
    keys = {}
    
    # OpenAI (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    print("\nü§ñ OpenAI API –∫–ª—é—á (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û):")
    print("   –ü–æ–ª—É—á–∏—Ç—å: https://platform.openai.com/api-keys")
    keys['openai'] = input("   –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á: ").strip()
    
    # Telegram Bot (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    print("\nüì± Telegram Bot Token (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û):")
    print("   –ü–æ–ª—É—á–∏—Ç—å: –Ω–∞–ø–∏—à–∏—Ç–µ @BotFather -> /newbot")
    keys['telegram_bot'] = input("   –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω: ").strip()
    
    # Telegram API –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    print("\nüì° Telegram API –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤:")
    print("   –ü–æ–ª—É—á–∏—Ç—å: https://my.telegram.org/apps")
    keys['telegram_api_id'] = input("   API ID: ").strip()
    keys['telegram_api_hash'] = input("   API Hash: ").strip()
    
    # DeepL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print("\nüåê DeepL API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    print("   –ü–æ–ª—É—á–∏—Ç—å: https://www.deepl.com/pro-api")
    deepl_key = input("   API –∫–ª—é—á (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    if deepl_key:
        keys['deepl'] = deepl_key
    
    # Stability AI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print("\nüé® Stability AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
    print("   –ü–æ–ª—É—á–∏—Ç—å: https://platform.stability.ai/")
    stability_key = input("   API –∫–ª—é—á (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    if stability_key:
        keys['stability'] = stability_key
    
    return keys

def step_2_sources():
    print("\n\nüì∫ –®–ê–ì 2: –ò–°–¢–û–ß–ù–ò–ö–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò")
    print("=" * 50)
    
    sources = {
        'telegram_channels': [],
        'twitter_accounts': []
    }
    
    # Telegram –∫–∞–Ω–∞–ª—ã
    print("\nüì± Telegram –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("   –§–æ—Ä–º–∞—Ç: @channel_name –∏–ª–∏ https://t.me/channel_name")
    print("   –ü—Ä–∏–º–µ—Ä—ã: @cryptonews, @bitcoin, @ethereum")
    
    channels_input = input("\n   –í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").strip()
    if channels_input:
        channels = [ch.strip().replace('https://t.me/', '@') for ch in channels_input.split(',')]
        for channel in channels:
            if not channel.startswith('@'):
                channel = '@' + channel
            sources['telegram_channels'].append({
                'name': channel.replace('@', ''),
                'username': channel,
                'weight': 1.0,
                'language': 'auto'
            })
    
    # Twitter –∞–∫–∫–∞—É–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print("\nüê¶ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
    print("   –ü—Ä–∏–º–µ—Ä—ã: coindesk, cointelegraph, elonmusk")
    
    twitter_input = input("   –í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    if twitter_input:
        accounts = [acc.strip().replace('@', '') for acc in twitter_input.split(',')]
        for account in accounts:
            sources['twitter_accounts'].append({
                'username': account,
                'weight': 1.0,
                'language': 'auto'
            })
    
    return sources

def step_3_affiliate():
    print("\n\nüí∞ –®–ê–ì 3: –ü–ê–†–¢–ù–ï–†–°–ö–ò–ï –°–°–´–õ–ö–ò")
    print("=" * 50)
    
    affiliate = {}
    
    print("\nüíé –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("   –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –ø–æ–∫–∞ –Ω–µ—Ç")
    
    # Binance
    binance_ref = input("\n   Binance —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞: ").strip()
    if binance_ref:
        affiliate['binance'] = binance_ref
    
    # Bybit
    bybit_ref = input("   Bybit —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞: ").strip()
    if bybit_ref:
        affiliate['bybit'] = bybit_ref
    
    # OKX
    okx_ref = input("   OKX —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞: ").strip()
    if okx_ref:
        affiliate['okx'] = okx_ref
    
    # –î—Ä—É–≥–∏–µ
    other_ref = input("   –î—Ä—É–≥–∞—è —Å—Å—ã–ª–∫–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ:—Å—Å—ã–ª–∫–∞): ").strip()
    if other_ref and ':' in other_ref:
        name, link = other_ref.split(':', 1)
        affiliate[name.strip()] = link.strip()
    
    # –ß–∞—Å—Ç–æ—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏
    print("\nüìä –ö–∞–∫ —á–∞—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏?")
    frequency = input("   –ö–∞–∂–¥—ã–π N-—ã–π –ø–æ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ").strip()
    try:
        affiliate_frequency = int(frequency) if frequency else 5
    except:
        affiliate_frequency = 5
    
    return affiliate, affiliate_frequency

def step_4_posting():
    print("\n\nüìÖ –®–ê–ì 4: –ù–ê–°–¢–†–û–ô–ö–ò –ü–£–ë–õ–ò–ö–ê–¶–ò–ò")
    print("=" * 50)
    
    # –í—ã—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª
    print("\nüì¢ –í –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?")
    print("   –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª!")
    output_channel = input("   ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ @username: ").strip()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
    posts_per_day = input("\nüìà –°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ").strip()
    try:
        posts_per_day = int(posts_per_day) if posts_per_day else 10
    except:
        posts_per_day = 10
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
    min_interval = input("   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60): ").strip()
    try:
        min_interval = int(min_interval) if min_interval else 60
    except:
        min_interval = 60
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    print("\n‚è∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å? (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)")
    work_hours = input("   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00-23:00 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24/7): ").strip()
    
    return {
        'output_channel': output_channel,
        'posts_per_day': posts_per_day,
        'min_interval': min_interval,
        'work_hours': work_hours or '00:00-23:59'
    }

def generate_env_file(keys, affiliate, affiliate_frequency, posting):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è .env —Ñ–∞–π–ª–∞"""
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
    secret_key = secrets.token_urlsafe(32)
    postgres_password = secrets.token_urlsafe(16)
    minio_password = secrets.token_urlsafe(16)
    
    env_content = f"""# üöÄ CRYPTO AUTOPOSTING SYSTEM CONFIG üöÄ
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

# === –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
DEBUG=false
LOG_LEVEL=INFO
SECRET_KEY={secret_key}

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
DATABASE_URL=postgresql://cryptouser:{postgres_password}@postgres:5432/cryptodb
POSTGRES_USER=cryptouser
POSTGRES_PASSWORD={postgres_password}
POSTGRES_DB=cryptodb

# === Redis ===
REDIS_URL=redis://redis:6379/0

# === API –∫–ª—é—á–∏ ===
OPENAI_API_KEY={keys['openai']}
TELEGRAM_BOT_TOKEN={keys['telegram_bot']}
TELEGRAM_API_ID={keys['telegram_api_id']}
TELEGRAM_API_HASH={keys['telegram_api_hash']}
"""
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏
    if 'deepl' in keys:
        env_content += f"DEEPL_API_KEY={keys['deepl']}\n"
    
    if 'stability' in keys:
        env_content += f"STABILITY_API_KEY={keys['stability']}\n"
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
    env_content += f"""
# === –ü—É–±–ª–∏–∫–∞—Ü–∏—è ===
OUTPUT_TELEGRAM_CHANNEL={posting['output_channel']}
POSTS_PER_DAY={posting['posts_per_day']}
MIN_INTERVAL_MINUTES={posting['min_interval']}
WORK_HOURS={posting['work_hours']}
"""
    
    # –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
    if affiliate:
        affiliate_json = json.dumps(affiliate, ensure_ascii=False)
        env_content += f"""
# === –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ ===
AFFILIATE_LINKS={affiliate_json}
AFFILIATE_FREQUENCY={affiliate_frequency}
"""
    
    # –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    env_content += f"""
# === –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤ ===
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY={minio_password}
MINIO_BUCKET=crypto-content

# === –ú–æ–¥–µ—Ä–∞—Ü–∏—è ===
HITL_WEBHOOK_URL=http://localhost:8000/hitl
ADMIN_TELEGRAM_IDS=
"""
    
    return env_content

def generate_sources_config(sources):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è config/sources.yaml"""
    
    config = {
        'telegram_channels': sources['telegram_channels'],
        'twitter_accounts': sources['twitter_accounts'],
        'processing_rules': {
            'min_score': 0.3,
            'max_similarity': 0.8,
            'hitl_threshold': 0.7,
            'languages': ['en', 'ru'],
            'content_types': ['news', 'analysis', 'technical']
        }
    }
    
    return yaml.dump(config, default_flow_style=False, allow_unicode=True)

def create_quick_start_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    
    script_content = """#!/bin/bash
# üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã

echo "üöÄ –ó–∞–ø—É—Å–∫ Crypto Autoposting System..."

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p data/postgres data/redis data/minio logs backups

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
docker-compose down 2>/dev/null || true

# –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ Redis
echo "üìä –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
docker-compose up -d postgres redis

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 15

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
docker-compose exec -T postgres psql -U cryptouser -d cryptodb -f /docker-entrypoint-initdb.d/init-db.sql 2>/dev/null || true

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose up -d

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10
docker-compose ps

echo ""
echo "üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
echo ""
echo "üìä –ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: http://localhost:3000"
echo "üîß API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000"
echo "üìù –ú–æ–¥–µ—Ä–∞—Ü–∏—è: http://localhost:8000/hitl"
echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥–∏: docker-compose exec redis redis-cli llen raw_content_queue"
echo "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏: docker-compose logs -f worker"
echo ""
"""
    
    return script_content

def create_quick_start_windows():
    """–°–æ–∑–¥–∞–Ω–∏–µ bat —Ñ–∞–π–ª–∞ –¥–ª—è Windows"""
    
    bat_content = """@echo off
echo üöÄ –ó–∞–ø—É—Å–∫ Crypto Autoposting System...

REM –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
if not exist "data\\postgres" mkdir data\\postgres
if not exist "data\\redis" mkdir data\\redis  
if not exist "data\\minio" mkdir data\\minio
if not exist "logs" mkdir logs
if not exist "backups" mkdir backups

REM –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
docker-compose down >nul 2>&1

REM –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo üìä –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...
docker-compose up -d postgres redis

REM –û–∂–∏–¥–∞–Ω–∏–µ
echo ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...
timeout /t 15 /nobreak >nul

REM –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
echo üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...
docker-compose exec -T postgres psql -U cryptouser -d cryptodb -f /docker-entrypoint-initdb.d/init-db.sql >nul 2>&1

REM –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...
docker-compose up -d

REM –ü—Ä–æ–≤–µ—Ä–∫–∞
echo ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...
timeout /t 10 /nobreak >nul
docker-compose ps

echo.
echo üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!
echo.
echo üìä –ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: http://localhost:3000
echo üîß API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000  
echo üìù –ú–æ–¥–µ—Ä–∞—Ü–∏—è: http://localhost:8000/hitl
echo.
pause
"""
    
    return bat_content

def main():
    print_header()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
        subprocess.run(['docker', '--version'], check=True, capture_output=True)
        subprocess.run(['docker-compose', '--version'], check=True, capture_output=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå –û–®–ò–ë–ö–ê: Docker –∏–ª–∏ Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop: https://www.docker.com/products/docker-desktop")
        return
    
    print("‚úÖ Docker –Ω–∞–π–¥–µ–Ω!")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ config –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('config', exist_ok=True)
    
    # –®–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    keys = step_1_api_keys()
    sources = step_2_sources()
    affiliate, affiliate_frequency = step_3_affiliate()
    posting = step_4_posting()
    
    print("\n\nüîß –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò...")
    print("=" * 50)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    env_content = generate_env_file(keys, affiliate, affiliate_frequency, posting)
    sources_content = generate_sources_config(sources)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env")
    
    with open('config/sources.yaml', 'w', encoding='utf-8') as f:
        f.write(sources_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª config/sources.yaml")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞
    with open('start.sh', 'w', encoding='utf-8') as f:
        f.write(create_quick_start_script())
    os.chmod('start.sh', 0o755)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç start.sh")
    
    with open('start.bat', 'w', encoding='utf-8') as f:
        f.write(create_quick_start_windows())
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç start.bat")
    
    print("\n\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 50)
    print(f"""
üìã –ß—Ç–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ:
   ‚Ä¢ .env - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   ‚Ä¢ config/sources.yaml - –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞  
   ‚Ä¢ start.sh / start.bat - —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞

üöÄ –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å:
   
   Linux/macOS:     ./start.sh
   Windows:         start.bat
   
   –ò–ª–∏ –≤—Ä—É—á–Ω—É—é:     docker-compose up -d

üìä –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ:
   ‚Ä¢ http://localhost:8000 - API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
   ‚Ä¢ http://localhost:3000 - Grafana (admin/admin)
   ‚Ä¢ http://localhost:8000/hitl - –º–æ–¥–µ—Ä–∞—Ü–∏—è

üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
   ‚Ä¢ –°—Ç–∞—Ç—É—Å: docker-compose ps
   ‚Ä¢ –õ–æ–≥–∏: docker-compose logs -f worker
   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down

üí° –°–æ–≤–µ—Ç: –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª!
""")

if __name__ == "__main__":
    main()
